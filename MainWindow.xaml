<Window x:Class="MEdit.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:converters="clr-namespace:MEdit.Converters"
        xmlns:local="clr-namespace:MEdit"
        xmlns:vm="clr-namespace:MEdit.ViewModels" 
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:b="http://schemas.microsoft.com/expression/2010/interactivity"
        
        mc:Ignorable="d"
        Title="MEdit - Meta Data Editor" Height="450" Width="900"
        MinWidth="450"
        PreviewKeyDown="Window_PreviewKeyDown"
        AllowDrop="True"
        DragOver="Window_DragOver" 
        Drop="Window_Drop"
        DragEnter="Window_DragEnter"
        DragLeave="Window_DragLeave"
        >

    <Window.Resources>
        <converters:VisibilityToBooleanConverter x:Key="VisibilityToBooleanConverter"/>
        <converters:HeaderToBooleanConverter x:Key="HeaderToBooleanConverter"/> 
        
        <!--Green Button-->
        <Style x:Key="PositiveButton" TargetType="Button">
            <Setter Property="Background" Value="Green"/>
            <Setter Property="Foreground" Value="WhiteSmoke"/>
            <Setter Property="FontFamily" Value="SF Pro Display"/>
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="DarkGreen"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="DarkGreen"/>
                    <Setter Property="Foreground" Value="LightGray"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!--Red Button-->
        <Style x:Key="NegativeButton" TargetType="Button">
            <Setter Property="Background" Value="Firebrick"/>
            <Setter Property="Foreground" Value="WhiteSmoke"/>
            <Setter Property="FontFamily" Value="SF Pro Display"/>
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="DarkRed"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="DarkRed"/>
                    <Setter Property="Foreground" Value="LightGray"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--Columns Context menu that tells whether to hide or show any columns-->
        <ContextMenu x:Key="GridColumnsContextMenu"
                     DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
                     ItemsSource="{Binding MenuItems}">
            <ContextMenu.ItemContainerStyle>
                <Style TargetType="MenuItem">
                    <Setter Property="Header" Value="{Binding Header}"/>
                    <Setter Property="IsCheckable"  Value="{Binding IsCheckable}" />
                    <Setter Property="IsEnabled" Value="{Binding IsEnabled}"/>
                    <Setter Property="IsChecked" Value="{Binding IsChecked, Mode=TwoWay}" />
                </Style>
            </ContextMenu.ItemContainerStyle>
        </ContextMenu>

        <ContextMenu x:Key="GridNameItemContextMenu" 
                     ItemsSource="{Binding DataContext.ElementNameMenuItems, Source={x:Reference dummyElement}}">
            <ContextMenu.ItemContainerStyle>
                <Style TargetType="MenuItem">
                    <Setter Property="Header" Value="{Binding Header}"/>
                    <Setter Property="Command" Value="{Binding Command}"/>
                </Style>
            </ContextMenu.ItemContainerStyle>
        </ContextMenu>

        <ContextMenu x:Key="GridDateItemContextMenu" 
                     ItemsSource="{Binding DataContext.ElementDateMenuItems, Source={x:Reference dummyElement}}">
            <ContextMenu.ItemContainerStyle>
                <Style TargetType="MenuItem">
                    <Setter Property="Header" Value="{Binding Header}"/>
                    <Setter Property="Command" Value="{Binding Command}"/>
                </Style>
            </ContextMenu.ItemContainerStyle>
        </ContextMenu>

        <Style x:Key="ColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="ContextMenu" Value="{StaticResource GridColumnsContextMenu}" />
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" MinWidth="150"/>
        </Grid.ColumnDefinitions>
        
        <!--Shadow Text for drag & drop files-->
        <TextBlock x:Name="Textblock" 
            Margin="10"
            Background="Transparent"
            Grid.Column="0" Grid.Row="0"
            Panel.ZIndex="9999" 
            Text="Drop files here to upload"
            TextWrapping="Wrap"
            TextAlignment="Center"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            FontFamily="SF Pro Display"
            Foreground="Black"
            FontSize="32"
            Opacity="1"
            FontWeight="Bold" 
            Visibility="Hidden"/>
        <FrameworkElement x:Name="dummyElement" Visibility="Collapsed"/>


        <DataGrid FontFamily="SF Pro Display" 
            x:Name="DataGrid"
            ItemsSource="{Binding Items}"
            ColumnHeaderStyle="{StaticResource ColumnHeaderStyle}"
            SelectedItem="{Binding SelectedItem}"
            RowHeaderWidth="7"
            SelectionMode="Single"
            Margin="10" 
            Background="Transparent"
            HorizontalGridLinesBrush="Transparent"
            VerticalGridLinesBrush="Transparent"
            MouseDoubleClick="DataGrid_MouseDoubleClick"
            PreparingCellForEdit="DataGrid_PreparingCellForEdit"
            CurrentCellChanged="DataGrid_CurrentCellChanged"
            PreviewKeyDown="DataGrid_PreviewKeyDown"
            AutoGenerateColumns="False">

            <!--Change row header background color whenever IsChanged property is updated-->
            <DataGrid.RowHeaderStyle>
                <Style TargetType="DataGridRowHeader">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsChanged}" Value="True">
                            <Setter Property="Background" Value="Pink"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowHeaderStyle>

            <DataGrid.Columns>
                
                <DataGridTextColumn Header="Name" Binding="{Binding Name, Mode=TwoWay}" Width="2*">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="Padding" Value="5"/>
                            <Setter Property="FontSize" Value="13"/>
                            <Setter Property="ContextMenu" Value="{StaticResource GridNameItemContextMenu}"/>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                    <DataGridTextColumn.EditingElementStyle>
                        <Style TargetType="TextBox">
                            <Setter Property="Padding" Value="5"/>
                            <Setter Property="FontSize" Value="13"/>
                        </Style>
                    </DataGridTextColumn.EditingElementStyle>
                </DataGridTextColumn>
                
                <DataGridTextColumn Header="File Size" Binding="{Binding Size}" Width="*" IsReadOnly="True"
                                    Visibility="{Binding DataContext.SizeVisibility, Mode=TwoWay, Source={x:Reference dummyElement}}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="Padding" Value="5"/>
                            <Setter Property="FontSize" Value="13"/>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                
                <DataGridTextColumn Header="Date Modified" Binding="{Binding DateModified}" IsReadOnly="True" Width="*"
                                    Visibility="{Binding DataContext.DateModifiedVisibility, Mode=TwoWay, Source={x:Reference dummyElement}}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Setter Property="Padding" Value="5"/>
                            <Setter Property="FontSize" Value="13"/>
                            <Setter Property="ContextMenu" Value="{StaticResource GridDateItemContextMenu}"/>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                
            </DataGrid.Columns>
        </DataGrid>


        <StackPanel Grid.Row="1" Grid.Column="3" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10">
            <Button Style="{StaticResource PositiveButton}" Content="Update" Margin="10 0 10 10" Height="25" Width="100" ToolTip="Click to update the properties" Command="{Binding UpdateCommand}"/>
            <Button Style="{StaticResource NegativeButton}" Content="Cancel" Margin="10 0 10 10" Height="25" Width="100" ToolTip="Click to cancel the operation" Command="{Binding ExitCommand}"/>
        </StackPanel>
    </Grid>

</Window>
